version: '3'

services:
  api:
    build:
      context: './'
      dockerfile: './API/Dockerfile'
    container_name: 'api'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
    ports:
      - "8080:8080"
    networks:
      - mynet
    depends_on:
      - postgres
      - rabbitmq
      - bankwebhook

  bankwebhook:
    build:
      context: './'
      dockerfile: './BankWebhook/Dockerfile'
    container_name: 'bankwebhook'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
    expose:
      - "8080"
    networks:
      - mynet
    depends_on:
      - postgres
      - rabbitmq

  smartcontractinterface:
    build:
      context: './'
      dockerfile: './SmartContractInterface/Dockerfile'
    container_name: 'smartcontractinterface'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
    expose:
      - "50051"
    networks:
      - mynet
    depends_on:
      - postgres
      - rabbitmq

  frontend:
    build:
      context: './'
      dockerfile: './Frontend/Dockerfile'
    container_name: 'frontend'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
    ports:
      - "80:8080"
    networks:
      - mynet
    depends_on:
      - api

  postgres:
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgrespassword
    volumes:
      - db:/var/lib/postgresql/data
    expose:
      - '5432'
    networks:
      - mynet

  rabbitmq:
    image: rabbitmq:3.10-management-alpine
    container_name: 'rabbitmq'
    hostname: 'rabbitmq'
    expose:
      - "5672"
      - "15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/
      - ./rabbit/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbit/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - mynet

networks:
  mynet:
    driver: bridge

volumes:
  db:
  rabbitmq_data:
  rabbitmq_log: